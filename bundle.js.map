{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://@elsci-io/ui-essential/./src/TextInput/TextInputValidityState.js","webpack://@elsci-io/ui-essential/./src/utils.js","webpack://@elsci-io/ui-essential/./src/TextInput/TextInput.js","webpack://@elsci-io/ui-essential/./src/ListBox/ListBox.js","webpack://@elsci-io/ui-essential/./src/TypeAheadInput/TypeAheadInput.js","webpack://@elsci-io/ui-essential/./src/SelectInput/SelectInput.js"],"sourcesContent":["export default class TextInputValidityState {\n\t#inputElement;\n\t#isValid;\n\t#errorMessage;\n\n\tconstructor(inputElement) {\n\t\tthis.#inputElement = inputElement;\n\t\tthis.#isValid = true;\n\t\tthis.#errorMessage = \"\";\n\t}\n\n\tget isValid() {\n\t\treturn this.#isValid;\n\t}\n\n\tget errorMessage() {\n\t\treturn this.#errorMessage;\n\t}\n\n\tcheckValidity() {\n\t\t// reset custom validity\n\t\tthis.setCustomValidity(\"\");\n\t\tthis.#inputElement.checkValidity();\n\t\t// if the input element is valid, then check custom validity\n\t\tlet validity = this.#inputElement.validity;\n\t\tif (validity.valid) {\n\t\t\tvalidity = this.#getCustomValidity();\n\t\t}\n\t\tthis.#isValid = validity.valid;\n\t\tthis.#errorMessage = this.#getValidationMessage(validity);\n\t\treturn this.isValid;\n\t}\n\n\tsetCustomValidity(message) {\n\t\tthis.#inputElement.setCustomValidity(message);\n\t\tthis.#isValid = this.#inputElement.validity.valid;\n\t\tthis.#errorMessage = message;\n\t}\n\n\t/**\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/ValidityState\n\t * Here we add our own validation steps, and update the validity state properties.\n\t *  - valueMissing: if the input element is required and the trimmed text is empty (contains only whitespaces).\n\t *  - rangeUnderflow: if the input element is a number and the value is less than the min attribute.\n\t *  - rangeOverflow: if the input element is a number and the value is greater than the max attribute.\n\t */\n\t#getCustomValidity() {\n\t\tconst cv = Object.assign({},\n\t\t\tthis.#inputElement.validity,\n\t\t\tthis.#isBlanknessConstraintViolated(),\n\t\t\tthis.#isRangeConstraintViolated()\n\t\t);\n\t\tcv.valid = !cv.valueMissing && !cv.rangeUnderflow && !cv.rangeOverflow;\n\t\treturn cv;\n\t}\n\n\t/**\n\t * Checks if the input element is required and the trimmed text is empty (contains only whitespaces).\n\t * @returns {{valueMissing: (*|boolean)}}\n\t */\n\t#isBlanknessConstraintViolated() {\n\t\tconst trimmedText = this.#inputElement.value.trim();\n\t\treturn {valueMissing: this.#inputElement.hasAttribute(\"required\") && trimmedText === \"\"};\n\t}\n\n\t/**\n\t * This is a workaround for the fact that the browser does not validate decimals properly. It takes only\n\t * first 18 digits of the decimal number and then compares it with the min and max attributes.\n\t * So if the min attribute is 0 and the value is -0.0000000000000000001, then the browser will not\n\t * consider it as a range underflow (after conversion it becomes -0 => 0).\n\t * This is why we have to check the value manually.\n\t */\n\t#isRangeConstraintViolated() {\n\t\tif (this.#inputElement.type !== \"number\")\n\t\t\treturn {rangeUnderflow: false, rangeOverflow: false};\n\t\tconst {min, max, value} = this.#inputElement;\n\t\treturn {rangeUnderflow: (min !== \"\" && +value < +min), rangeOverflow: (max !== \"\" && +value > +max)};\n\t}\n\n\t#getValidationMessage(validityState) {\n\t\tconst isTypeNumber = this.#inputElement.type === \"number\";\n\t\tconst {badInput, rangeOverflow, rangeUnderflow, tooLong, tooShort, valueMissing, stepMismatch} = validityState;\n\t\tif (isTypeNumber && badInput)\n\t\t\treturn \"Invalid number\";\n\t\tif (isTypeNumber && stepMismatch && this.#inputElement.step === \"1\") {\n\t\t\t// Here we validate only floats because if step is 1, then the value must be an integer.\n\t\t\treturn \"Must be an integer\";\n\t\t}\n\t\tif (rangeOverflow)\n\t\t\treturn \"Greater than \" + this.#inputElement.max;\n\t\tif (rangeUnderflow)\n\t\t\treturn \"Less than \" + this.#inputElement.min;\n\t\tif (tooLong)\n\t\t\treturn \"Max length is \" + this.#inputElement.maxLength;\n\t\tif (tooShort)\n\t\t\treturn \"Min length is \" + this.#inputElement.minLength;\n\t\tif (!badInput && valueMissing)\n\t\t\treturn \"Required\";\n\t\treturn this.#inputElement.validationMessage;\n\t}\n}","export const KeyCode = Object.freeze({\n    \"Shift\": \"ShiftLeft\",\n    \"Esc\": \"Escape\",\n    \"Enter\": \"Enter\",\n    \"Up\": \"ArrowUp\",\n    \"Down\": \"ArrowDown\"\n});\n\n/**\n * @param {string} unsafe\n * @returns {string}\n */\nexport const safeText = (unsafe) => {\n    if (!unsafe)\n        return ''\n    return unsafe\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#039;\");\n}\n\n/**\n * To be used when generating HTML via string interpolation e.g. {@code safeHtml`<div>${variables}</div>`} -\n * these variables will go through this function and have to be escaped should such string be shown on UI.\n *\n * @param {TemplateStringsArray} strings\n * @param {string[]} values\n * @returns {string}\n */\nexport const safeHtml = (strings, ...values) => {\n    let result = strings[0];\n    for (let i = 0; i < values.length; i++) {\n        result += safeText(String(values[i]));\n        result += strings[i + 1];\n    }\n    return result;\n}\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nexport function getTextWidth(text, font) {\n    // re-use canvas object for better performance\n    const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement(\"canvas\"));\n    const context = canvas.getContext(\"2d\");\n    context.font = font;\n    const metrics = context.measureText(text);\n    return metrics.width;\n}\n\nexport function getCanvasFont(el = document.body) {\n    const fontWeight = getCssStyle(el, 'font-weight') || 'normal';\n    const fontSize = getCssStyle(el, 'font-size') || '16px';\n    const fontFamily = getCssStyle(el, 'font-family') || 'Times New Roman';\n\n    return `${fontWeight} ${fontSize} ${fontFamily}`;\n}\n\nfunction getCssStyle(element, prop) {\n    return window.getComputedStyle(element, null).getPropertyValue(prop);\n}\n\nexport function isFiniteNumber (value) {\n    if (typeof value !== 'undefined' && Number.isFinite(value)) {\n        return true\n    }\n   else return false\n}","// @ts-check\nimport TextInputValidityState from \"./TextInputValidityState.js\";\nimport {isFiniteNumber, KeyCode, safeHtml} from \"../utils.js\"\n\nexport default class TextInput extends HTMLElement {\n    static #INPUT_ATTRIBUTES = new Set([\"autocomplete\", \"autofocus\", \"disabled\", \"max\", \"maxlength\", \"min\", \"minlength\",\n        \"name\", \"pattern\", \"readonly\", \"required\", \"step\", \"type\", \"value\"]);\n    /** @type {HTMLInputElement} */\n    #inputElement;\n    /** @type {HTMLElement} */\n    #errorElement;\n    /** @type {TextInputValidityState} */\n    #validityState;\n    #callbacks = {\n        /** @type {Function[]} */\n        onTrailingIconClick: [],\n        /** @type {Function[]} */\n        onChangeValue: [],\n        /** @type {Function[]} */\n        onInput: []\n    };\n\n    connectedCallback() {\n        this.innerHTML = this.#htmlTemplate();\n        this.#inputElement = this.querySelector(\"input\");\n        this.#errorElement = this.querySelector(\".text-input__error\");\n        this.#validityState = new TextInputValidityState(this.#inputElement);\n        this.#fillInputAttributes();\n        this.#addListeners();\n        if (this.hasAttribute(\"value\"))\n            this.value = this.getAttribute(\"value\");\n    }\n\n    disconnectedCallback() {\n        // Save value to attribute, because it will be lost after element is removed from DOM and reinserted.\n        // The case is happening when user adds new element to the table and then sorts it by reinserting rows.\n        this.setAttribute(\"value\", this.value);\n        window.removeEventListener(\"visibilitychange\", this.#onVisibilityChange.bind(this), { capture: true });\n    }\n\n    /**\n     * Returns trimmed value of the input.\n     * @returns {string}\n     */\n    get value() {\n        return this.rawValue.trim();\n    }\n\n    /**\n     * Returns raw value of the input.\n     * @returns {string}\n     */\n    get rawValue() {\n        return this.#inputElement.value;\n    }\n\n    /** @param {string | null} value */\n    set value(value) {\n        this.#inputElement.value = (isFiniteNumber(value) || typeof value == \"string\")? value : '';\n                this.checkValidity();\n    }\n\n    checkValidity() {\n        const isValid = this.#validityState.checkValidity();\n        this.#errorElement.textContent = this.#validityState.errorMessage;\n        return isValid;\n    }\n\n    get errorMessage() {\n        return this.#errorElement.textContent;\n    }\n\n    set errorMessage(message) {\n        this.#validityState.setCustomValidity(message);\n        this.#errorElement.textContent = this.#validityState.errorMessage;\n    }\n\n    /** @param {Function} callback */\n    onTrailingIconClick(callback) {\n        this.#callbacks.onTrailingIconClick.push(callback);\n    }\n    /** @param {Function} callback */\n    onInput(callback) {\n        this.#callbacks.onInput.push(callback);\n    }\n    /** @param {Function} callback */\n    onChangeValue(callback) {\n        this.#callbacks.onChangeValue.push(callback);\n    }\n\n    /** @param {KeyboardEvent} event */\n    #onKeyDown(event) {\n        if (this.#inputElement.type === \"number\" && (event.key === KeyCode.Up || event.key === KeyCode.Down))\n            event.preventDefault();\n    }\n\n    #onInput() {\n        this.checkValidity();\n        this.#callbacks.onInput.forEach(callback => callback(this.value));\n    }\n\n    #onChange() {\n        this.#validateAndNotify();\n    }\n\n    #onTrailingIconClick() {\n        this.#callbacks.onTrailingIconClick.forEach(callback => callback());\n    }\n\n    #validateAndNotify() {\n        this.checkValidity();\n        this.#callbacks.onChangeValue.forEach(callback => callback(this.value));\n    }\n\n    #fillInputAttributes() {\n        for (const attribute of this.attributes)\n            if (TextInput.#INPUT_ATTRIBUTES.has(attribute.name))\n                this.#inputElement.setAttribute(attribute.name, attribute.value)\n        // For number inputs, if step is not specified then it is set to 1 by default, and it is not possible to enter\n        // decimal w/o validation error. So, if step is not specified, then we set it to \"any\" to allow decimal values.\n        if (this.getAttribute(\"type\") === \"number\" && !this.hasAttribute(\"step\"))\n            this.#inputElement.setAttribute(\"step\", \"any\");\n    }\n\n    #addListeners() {\n        this.#inputElement.addEventListener(\"keydown\", this.#onKeyDown.bind(this));\n        this.#inputElement.addEventListener(\"input\", this.#onInput.bind(this));\n        this.#inputElement.addEventListener(\"change\", this.#onChange.bind(this));\n        this.querySelector('.text-input__trailing-icon').addEventListener(\"click\", this.#onTrailingIconClick.bind(this));\n        window.addEventListener(\"visibilitychange\", this.#onVisibilityChange.bind(this), { capture: true });\n    }\n\n    /**\n     * This method is called when user:\n     *  - closes the tab\n     *  - closes browser window\n     *  - refreshes the page\n     *  - navigates to another page\n     *  - navigates to another tab\n     *  - minimizes the browser window\n     *\n     *  It is needed to blur the input element, because if it is focused, then it might be not saved to the database.\n     *  Blurring the input element will trigger the change event, if the value was changed.\n     *\n     *  Note: If the user closes the tab or browser window, then there is no guarantee that asynchronous requests\n     *  (XHR or fetch) will be sent. So, if the user closes the tab or browser window, then the value\n     *  of the input element might not be saved to the database.\n     */\n    #onVisibilityChange() {\n        if (document.activeElement === this.#inputElement)\n            this.#inputElement.blur();\n    }\n\n    #htmlTemplate() {\n        const trailingIconName = this.getAttribute(\"data-icon\") || \"\";\n        return safeHtml`<input class=\"text-input__input\" placeholder=\"needed for CSS\">\n                <label class=\"text-input__label\">${this.getAttribute(\"label\")}</label>\n                <i class=\"text-input__trailing-icon material-symbols-outlined\">${trailingIconName}</i>\n                <p class=\"text-input__error\"></p>`;\n    }\n\n    static get is() {\n        return 'text-input';\n    }\n}\n\nwindow.customElements.define(TextInput.is, TextInput);","import {getTextWidth, getCanvasFont, safeHtml} from \"../utils.js\";\n\nexport default class ListBox extends HTMLElement {\n    #listElement;\n    #values = [];\n    #maxItemWidth = 0;\n    #selectedElementIndex = -1;\n    #callbacks = {\n        onOptionClick: []\n    }\n\n    /**\n     * @returns {{displayName:string}[]}\n     */\n    get options() {\n        return this.#values;\n    }\n\n    /**\n     * @param {{displayName:string}[]}values\n     */\n    set options(values) {\n        this.#setValues(values);\n        this.innerHTML = this.#htmlTemplate();\n        this.#listElement = this.querySelector(\"ul\");\n        this.#updatePosition();\n        this.#addListeners();\n    }\n\n    /**\n     * @param {string} filter\n     */\n    set filter(filter) {\n        const searchString = filter.toLowerCase();\n        for (const li of this.querySelectorAll(\"li\")) {\n            const {displayName} = this.#values[li.dataset.index];\n            const indexOf = displayName.toLowerCase().indexOf(searchString);\n            li.innerHTML = this.#getMarkedText(displayName, indexOf, searchString.length);\n            li.toggleAttribute('hidden', indexOf === -1);\n        }\n        const selectedElement = this.#getSelectedElement();\n        if (selectedElement) {\n            if (selectedElement.hasAttribute('hidden'))\n                this.#resetCurrentSelection();\n            else\n                selectedElement.scrollIntoView({block: \"nearest\"});\n        }\n    }\n\n    show() {\n        this.style.display = 'block';\n        this.#updatePosition();\n    }\n\n    hide() {\n        this.style.display = 'none';\n        this.#resetCurrentSelection();\n    }\n\n    selectNextItem() {\n        const visibleElements = this.#getVisibleElements();\n        if (!this.hasSelectedElement()) {\n            if (visibleElements.length === 0)\n                return;\n            this.#setSelectedElement(visibleElements[0].dataset.index);\n        } else {\n            const indexOf = visibleElements.indexOf(this.#getSelectedElement());\n            if (visibleElements.length - 1 <= indexOf) // is last item?\n                return;\n            this.#setSelectedElement(visibleElements[indexOf + 1].dataset.index);\n        }\n    }\n\n    selectPrevItem() {\n        const visibleElements = this.#getVisibleElements();\n        if (!this.hasSelectedElement()) {\n            if (visibleElements.length === 0)\n                return;\n            this.#setSelectedElement(visibleElements[visibleElements.length - 1].dataset.index);\n        } else {\n            const indexOf = visibleElements.indexOf(this.#getSelectedElement());\n            if (indexOf === 0) // is first item?\n                return;\n            this.#setSelectedElement(visibleElements[indexOf - 1].dataset.index);\n        }\n    }\n\n    triggerClickOnSelectedItem() {\n        if (this.hasSelectedElement())\n            this.#getSelectedElement().dispatchEvent(new MouseEvent('mousedown'));\n    }\n\n    hasSelectedElement() {\n        return this.#getSelectedElement() != null;\n    }\n\n    isVisible() {\n        return window.getComputedStyle(this).display !== 'none'\n    }\n\n    onOptionClick(cb) {\n        this.#callbacks.onOptionClick.push(cb);\n    }\n\n    connectedCallback() {\n        this.innerHTML = this.#htmlTemplate();\n        this.#listElement = this.querySelector(\"ul\");\n        this.#addListeners();\n    }\n\n    #setValues(values) {\n        this.#values = [...values].sort((a, b) => a.displayName.localeCompare(b.displayName));\n    }\n\n    #getVisibleElements() {\n        return [...this.#listElement.querySelectorAll('li:not([hidden])')];\n    }\n\n    #addListeners() {\n        for (const li of this.querySelectorAll(\"li\")) {\n            li.addEventListener('mousedown', () => {\n                const option = this.#values[li.dataset.index];\n                this.#callbacks.onOptionClick.forEach(cb => cb(option));\n            });\n        }\n    }\n\n    #htmlTemplate() {\n        return `\n            <ul>\n                ${this.#values.map((value, i) =>\n            safeHtml`<li data-index=\"${i}\" title=\"${value.displayName}\">${value.displayName}</li>`\n        ).join('')}\n            </ul>`;\n    }\n\n    #updatePosition() {\n        const font = getCanvasFont();\n        const parentClientRect = this.parentElement.getBoundingClientRect();\n        if (this.#maxItemWidth === 0) // calculate max item width only once\n            this.#maxItemWidth = Math.max(...this.#values.map(value => getTextWidth(value.displayName, font)), 0);\n        // if parent element width is greater than max item width, set list width to parent width\n        const widthToBe = Math.max(this.#maxItemWidth + 24/*paddings*/ + 22/*scrollbar*/, parentClientRect.width);\n        // max allowed width is the distance from the left side of parent element to the right side of the page\n        const maxAllowedWidth = document.documentElement.clientWidth - parentClientRect.left\n        if (widthToBe > maxAllowedWidth) { // can't fit to the right side, so put it to the left side\n            this.#listElement.style.right = 0;\n        } else {\n            this.#listElement.style.right = null;\n        }\n        this.#listElement.style.width = `${Math.min(widthToBe, document.documentElement.clientWidth)}px`;\n    }\n\n    #getSelectedElement() {\n        return this.querySelector(`li[data-index=\"${this.#selectedElementIndex}\"]`);\n    }\n\n    #setSelectedElement(elementIndex) {\n        this.#resetCurrentSelection();\n        this.#selectedElementIndex = elementIndex;\n        const element = this.#getSelectedElement();\n        element.classList.add('list-box__item--active');\n        element.scrollIntoView({block: \"nearest\"});\n    }\n\n    #resetCurrentSelection() {\n        if (this.#selectedElementIndex >= 0) {\n            const selectedElement = this.#getSelectedElement();\n            selectedElement.classList.remove('list-box__item--active');\n            this.#selectedElementIndex = -1;\n        }\n    }\n\n    #getMarkedText(text, startIndex, length) {\n        if (startIndex >= 0) {\n            const before = text.substring(0, startIndex);\n            const match = text.substring(startIndex, startIndex + length);\n            const after = text.substring(startIndex + length);\n            // wrap whole text in span to prevent swallowing spaces\n            return safeHtml`<span>${before}<mark>${match}</mark>${after}</span>`;\n        } else {\n            return text;\n        }\n    }\n\n    static get is() {\n        return 'list-box';\n    }\n}\n\nwindow.customElements.define(ListBox.is, ListBox);","import '../TextInput/TextInput.js';\nimport '../ListBox/ListBox.js';\nimport { KeyCode, safeHtml } from \"../utils.js\"\n\nexport default class TypeAheadInput extends HTMLElement {\n    /**\n     * @type {TextInput}\n     */\n    #inputElement;\n    /**\n     * @type {ListBox}\n     */\n    #dropdownElement;\n    #currentValue;\n    #lastValidValue = null;\n    #callbacks = {\n        onChangeValue: []\n    }\n\n    connectedCallback() {\n        this.innerHTML = this.#htmlTemplate();\n        this.#inputElement = this.querySelector(\"text-input\");\n        this.#dropdownElement = this.querySelector(\"list-box\");\n        this.#addListeners();\n    }\n\n    get value() {\n        return this.#currentValue;\n    }\n\n    set value(value) {\n        this.#currentValue = value;\n        this.#inputElement.value = value && value.displayName ? value.displayName : \"\";\n    }\n\n    /**\n     * Sets the initial value of the input, as well as the last valid value.\n     */\n    set initialValue(value) {\n        this.value = value;\n        this.#lastValidValue = value;\n    }\n\n    set options(options) {\n        this.#dropdownElement.options = options;\n    }\n\n    checkValidity() {\n        return this.#validate() && this.#inputElement.checkValidity();\n    }\n\n    onChangeValue(callback) {\n        this.#callbacks.onChangeValue.push(callback);\n    }\n\n    #onInput() {\n        this.#setErrorMessage(\"\");\n        this.#filterDatalist();\n        if (!this.#dropdownElement.isVisible())\n            this.#dropdownElement.show();\n    }\n\n    #onFocus() {\n        this.#filterDatalist();\n        this.#dropdownElement.show();\n    }\n\n    #onBlur() {\n        this.#hideDropdownAndValidate();\n    }\n\n    #onOptionClick(option) {\n        this.value = option;\n        this.#hideDropdownAndValidate();\n    }\n\n    #onClearIconClick() {\n        this.value = {displayName: \"\"};\n        this.#inputElement.querySelector('input').focus();\n    }\n\n    #onKeydown(event) {\n        if ([KeyCode.Up, KeyCode.Down].includes(event.code)) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n        switch (event.key) {\n            case KeyCode.Esc: {\n                this.#hideDropdownAndValidate();\n                break;\n            }\n            case KeyCode.Enter: {\n                if (this.#dropdownElement.isVisible())\n                    if (this.#dropdownElement.hasSelectedElement())\n                        this.#dropdownElement.triggerClickOnSelectedItem();\n                    else\n                        this.#hideDropdownAndValidate();\n                break;\n            }\n            case KeyCode.Down: {\n                if (!this.#dropdownElement.isVisible())\n                    this.#dropdownElement.show();\n                this.#dropdownElement.selectNextItem();\n                break;\n            }\n            case KeyCode.Up: {\n                if (!this.#dropdownElement.isVisible())\n                    this.#dropdownElement.show();\n                this.#dropdownElement.selectPrevItem();\n                break;\n            }\n        }\n    }\n\n    #onInputValueChange() {\n        this.#validateAndNotify();\n    }\n\n    #hideDropdownAndValidate() {\n        this.#dropdownElement.hide();\n        this.#validateAndNotify();\n    }\n\n    #validateAndNotify() {\n        if (this.#validate() && this.#isValueChanged()) {\n            this.#lastValidValue = this.value;\n            this.#callbacks.onChangeValue.forEach(callback => callback(this.value));\n        }\n    }\n\n    #validate() {\n        const inputText = this.#inputElement.value;\n        if (inputText === \"\") {\n            this.#currentValue = null;\n            return true; // assume that value is valid if it is empty, otherwise required attribute should be set\n        }\n        if (this.value && this.value.displayName === inputText) {\n            this.#setErrorMessage(\"\");\n            return true; // assume that value is valid if it is the same as the initial value\n        }\n        for (const option of this.#dropdownElement.options) {\n            if (option.displayName === inputText) {\n                this.#setErrorMessage(\"\");\n                this.#currentValue = option;\n                this.#inputElement.value = option.displayName;\n                return true;\n            }\n        }\n        this.#currentValue = null;\n        this.#setErrorMessage(\"Select from list\");\n        return false;\n    }\n\n    #setErrorMessage(message) {\n        this.#inputElement.errorMessage = message;\n    }\n\n    #filterDatalist() {\n        this.#dropdownElement.filter = this.#inputElement.value;\n    }\n\n    #isValueChanged() {\n        return this.#lastValidValue !== this.value;\n    }\n\n    #addListeners() {\n        const input = this.#inputElement.querySelector(\"input\");\n        this.addEventListener(\"keydown\", this.#onKeydown.bind(this));\n        input.addEventListener(\"input\", this.#onInput.bind(this));\n        input.addEventListener(\"blur\", this.#onBlur.bind(this));\n        input.addEventListener('focus', this.#onFocus.bind(this));\n        this.#inputElement.onTrailingIconClick(this.#onClearIconClick.bind(this));\n        this.#inputElement.onChangeValue(this.#onInputValueChange.bind(this));\n        this.#dropdownElement.onOptionClick(this.#onOptionClick.bind(this));\n    }\n\n    #htmlTemplate() {\n        const requiredAttribute = this.hasAttribute(\"required\") ? \"required\" : \"\";\n        const disabledAttribute = this.hasAttribute(\"disabled\") ? \"disabled\" : \"\";\n        return safeHtml`\n            <text-input \n                class=\"text-input--with-right-icon\" \n                label=\"${this.getAttribute(\"label\")}\" \n                ${requiredAttribute}\n                ${disabledAttribute}\n                data-icon=\"close\"\n                autocomplete=\"off\"\n            ></text-input>\n            <list-box></list-box>`;\n    }\n\n    static get is() {\n        return 'typeahead-input';\n    }\n}\n\nwindow.customElements.define(TypeAheadInput.is, TypeAheadInput);","import {KeyCode, safeHtml} from \"../utils.js\";\n\nexport default class SelectInput extends HTMLElement {\n    #inputElement;\n    #dropdownElement;\n    #currentValue;\n    #lastValidValue = null;\n\n    #callbacks = {\n        onShowDropdown: [],\n        onChangeValue: []\n    }\n\n    get value() {\n        return this.#currentValue;\n    }\n\n    set value(value) {\n        this.#inputElement.value = value && value.displayName ? value.displayName : \"\";\n        this.#currentValue = value;\n    }\n\n    set options(options) {\n        this.#dropdownElement.options = options;\n    }\n\n    showDropdown() {\n        this.#dropdownElement.show();\n        this.#callbacks.onShowDropdown.forEach(callback => callback());\n    }\n\n    onShowDropdown(callback) {\n        this.#callbacks.onShowDropdown.push(callback);\n    }\n\n    onChangeValue(callback) {\n        this.#callbacks.onChangeValue.push(callback);\n    }\n\n    isValid() {\n        return this.#validate();\n    }\n\n    connectedCallback() {\n        this.innerHTML = this.#htmlTemplate();\n        this.#inputElement = this.querySelector(\"text-input\");\n        this.#dropdownElement = this.querySelector(\"list-box\");\n        this.#addListeners();\n    }\n\n    #addListeners() {\n        this.addEventListener(\"keydown\", this.#onKeydown.bind(this));\n        const input = this.#inputElement.querySelector(\"input\");\n        input.addEventListener('focus', this.#onFocus.bind(this));\n        input.addEventListener(\"focusout\", this.#onFocusout.bind(this));\n        input.addEventListener(\"click\", this.#onInputClick.bind(this));\n        this.#dropdownElement.onOptionClick(this.#onOptionClick.bind(this));\n    }\n\n    #onFocus() {\n        this.showDropdown();\n    }\n\n    #onFocusout() {\n        this.#hideDropdownAndValidate();\n    }\n\n    #onOptionClick(option) {\n        this.#inputElement.value = option.displayName;\n        this.#currentValue = option;\n        this.#hideDropdownAndValidate();\n    }\n\n    #onInputClick() {\n        this.showDropdown();\n    }\n\n    #onKeydown(event) {\n        if ([KeyCode.Up, KeyCode.Down].includes(event.code)) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n        switch (event.key) {\n            case KeyCode.Esc: {\n                this.#hideDropdownAndValidate();\n                this.#inputElement.focus()\n                break;\n            }\n            case KeyCode.Enter: {\n                if (this.#dropdownElement.isVisible()) {\n                    if (this.#dropdownElement.hasSelectedElement())\n                        this.#dropdownElement.triggerClickOnSelectedItem();\n                    else\n                        this.#dropdownElement.hide();\n                }\n                break;\n            }\n            case KeyCode.Down: {\n                if (!this.#dropdownElement.isVisible())\n                    this.#dropdownElement.show();\n                this.#dropdownElement.selectNextItem();\n                break;\n            }\n            case KeyCode.Up: {\n                if (!this.#dropdownElement.isVisible())\n                    this.#dropdownElement.show();\n                this.#dropdownElement.selectPrevItem();\n                break;\n            }\n        }\n    }\n\n    #hideDropdownAndValidate() {\n        this.#dropdownElement.hide();\n        this.#validateAndNotify();\n    }\n\n    #validateAndNotify() {\n        if (this.#validate() && this.#lastValidValue !== this.value) {\n            this.#lastValidValue = this.value;\n            this.#callbacks.onChangeValue.forEach(callback => callback(this.value))\n        }\n    }\n\n    #validate() {\n        if (this.#inputElement.hasAttribute(\"required\") && !this.#inputElement.value)\n            this.#inputElement.errorMessage = \"Required\";\n        else\n            this.#inputElement.errorMessage = \"\";\n        return this.#inputElement.checkValidity();\n    }\n\n    #htmlTemplate() {\n        const requiredAttribute = this.hasAttribute(\"required\") ? \"required\" : \"\";\n        const disabledAttribute = this.hasAttribute(\"disabled\") ? \"disabled\" : \"\";\n        return safeHtml`\n            <text-input\n                class=\"text-input--select\" \n                label=\"${this.getAttribute(\"label\")}\" \n                ${requiredAttribute}\n                ${disabledAttribute}\n                data-icon=\"arrow_drop_down\"\n                readonly\n            ></text-input>\n            <list-box></list-box>`;\n    }\n\n    static get is() {\n        return 'select-input';\n    }\n}\n\nwindow.customElements.define(SelectInput.is, SelectInput);"],"names":["TextInputValidityState","constructor","inputElement","this","isValid","errorMessage","checkValidity","setCustomValidity","validity","valid","message","cv","Object","assign","valueMissing","rangeUnderflow","rangeOverflow","trimmedText","value","trim","hasAttribute","type","min","max","validityState","isTypeNumber","badInput","tooLong","tooShort","stepMismatch","step","maxLength","minLength","validationMessage","KeyCode","freeze","safeHtml","strings","values","result","i","length","unsafe","String","replace","getTextWidth","text","font","context","canvas","document","createElement","getContext","measureText","width","getCssStyle","element","prop","window","getComputedStyle","getPropertyValue","TextInput","HTMLElement","static","Set","onTrailingIconClick","onChangeValue","onInput","connectedCallback","innerHTML","querySelector","getAttribute","disconnectedCallback","setAttribute","removeEventListener","bind","capture","rawValue","Number","isFinite","isFiniteNumber","textContent","callback","push","event","key","Up","Down","preventDefault","forEach","attribute","attributes","has","name","addEventListener","activeElement","blur","trailingIconName","is","customElements","define","ListBox","onOptionClick","options","filter","searchString","toLowerCase","li","querySelectorAll","displayName","dataset","index","indexOf","toggleAttribute","selectedElement","scrollIntoView","block","show","style","display","hide","selectNextItem","visibleElements","hasSelectedElement","selectPrevItem","triggerClickOnSelectedItem","dispatchEvent","MouseEvent","isVisible","cb","sort","a","b","localeCompare","option","map","join","el","body","getCanvasFont","parentClientRect","parentElement","getBoundingClientRect","Math","widthToBe","maxAllowedWidth","documentElement","clientWidth","left","right","elementIndex","classList","add","remove","startIndex","before","substring","match","after","TypeAheadInput","initialValue","focus","includes","code","stopImmediatePropagation","Esc","Enter","inputText","input","requiredAttribute","disabledAttribute","SelectInput","onShowDropdown","showDropdown"],"sourceRoot":""}
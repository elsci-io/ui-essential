{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://@elsci-io/ui-essential/./src/TextInput/TextInputValidityState.js","webpack://@elsci-io/ui-essential/./src/utils.js","webpack://@elsci-io/ui-essential/./src/TextInput/TextInput.js","webpack://@elsci-io/ui-essential/./src/ListBox/ListBox.js","webpack://@elsci-io/ui-essential/./src/TypeAheadInput/TypeAheadInput.js","webpack://@elsci-io/ui-essential/./src/SelectInput/SelectInput.js"],"sourcesContent":["export default class TextInputValidityState {\n\t#textInput;\n\t#inputElement;\n\t#isValid;\n\t#errorMessage;\n\n\tconstructor(textInput) {\n\t\tthis.#textInput = textInput\n\t\tthis.#inputElement = textInput.querySelector('input');\n\t\tthis.#isValid = true;\n\t\tthis.#errorMessage = \"\";\n\t}\n\n\tget isValid() {\n\t\treturn this.#isValid;\n\t}\n\n\tget errorMessage() {\n\t\treturn this.#errorMessage;\n\t}\n\n\tcheckValidity() {\n\t\t// reset custom validity\n\t\tthis.setCustomValidity(\"\");\n\t\tthis.#inputElement.checkValidity();\n\t\t// if the input element is valid, then check custom validity\n\t\tlet validity = this.#inputElement.validity;\n\t\tif (validity.valid) {\n\t\t\tvalidity = this.#getCustomValidity();\n\t\t}\n\t\tthis.#isValid = validity.valid;\n\t\tthis.#errorMessage = this.#getValidationMessage(validity);\n\t\treturn this.isValid;\n\t}\n\n\tsetCustomValidity(message) {\n\t\tthis.#inputElement.setCustomValidity(message);\n\t\tthis.#isValid = this.#inputElement.validity.valid;\n\t\tthis.#errorMessage = message;\n\t}\n\n\t/**\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/ValidityState\n\t * Here we add our own validation steps, and update the validity state properties.\n\t *  - valueMissing: if the input element is required and the trimmed text is empty (contains only whitespaces).\n\t *  - rangeUnderflow: if the input element is a number and the value is less than the min attribute.\n\t *  - rangeOverflow: if the input element is a number and the value is greater than the max attribute.\n\t */\n\t#getCustomValidity() {\n\t\tconst {badInput, customError, patternMismatch, typeMismatch, valid, rangeOverflow, rangeUnderflow, tooLong,\n\t\t\ttooShort, valueMissing, stepMismatch} = this.#inputElement.validity;\n\t\tconst cv = Object.assign({},\n\t\t\t{badInput, customError, patternMismatch, typeMismatch, valid, rangeOverflow, rangeUnderflow, tooLong,\n\t\t\t\ttooShort, valueMissing, stepMismatch},\n\t\t\tthis.#isBlanknessConstraintViolated(),\n\t\t\tthis.#isRangeConstraintViolated()\n\t\t);\n\t\tcv.valid = !cv.valueMissing && !cv.rangeUnderflow && !cv.rangeOverflow;\n\t\treturn cv;\n\t}\n\n\t/**\n\t * Checks if the input element is required and the trimmed text is empty (contains only whitespaces).\n\t * @returns {{valueMissing: (*|boolean)}}\n\t */\n\t#isBlanknessConstraintViolated() {\n\t\tconst trimmedText = this.#inputElement.value.trim();\n\t\treturn {valueMissing: this.#textInput.hasAttribute(\"required\") && trimmedText === \"\"};\n\t}\n\n\t/**\n\t * This is a workaround for the fact that the browser does not validate decimals properly. It takes only\n\t * first 18 digits of the decimal number and then compares it with the min and max attributes.\n\t * So if the min attribute is 0 and the value is -0.0000000000000000001, then the browser will not\n\t * consider it as a range underflow (after conversion it becomes -0 => 0).\n\t * This is why we have to check the value manually.\n\t */\n\t#isRangeConstraintViolated() {\n\t\tif (this.#inputElement.type !== \"number\")\n\t\t\treturn {rangeUnderflow: false, rangeOverflow: false};\n\t\tconst {min, max, value} = this.#inputElement;\n\t\treturn {rangeUnderflow: (min !== \"\" && +value < +min), rangeOverflow: (max !== \"\" && +value > +max)};\n\t}\n\n\t#getValidationMessage(validityState) {\n\t\tconst isTypeNumber = this.#inputElement.type === \"number\";\n\t\tconst {badInput, rangeOverflow, rangeUnderflow, tooLong, tooShort, valueMissing, stepMismatch} = validityState;\n\t\tif (isTypeNumber && badInput)\n\t\t\treturn \"Invalid number\";\n\t\tif (isTypeNumber && stepMismatch && this.#inputElement.step === \"1\") {\n\t\t\t// Here we validate only floats because if step is 1, then the value must be an integer.\n\t\t\treturn \"Must be an integer\";\n\t\t}\n\t\tif (rangeOverflow)\n\t\t\treturn \"Greater than \" + this.#inputElement.max;\n\t\tif (rangeUnderflow)\n\t\t\treturn \"Less than \" + this.#inputElement.min;\n\t\tif (tooLong)\n\t\t\treturn \"Max length is \" + this.#inputElement.maxLength;\n\t\tif (tooShort)\n\t\t\treturn \"Min length is \" + this.#inputElement.minLength;\n\t\tif (!badInput && valueMissing)\n\t\t\treturn \"Required\";\n\t\treturn this.#inputElement.validationMessage;\n\t}\n}","export const KeyCode = Object.freeze({\n    \"Shift\": \"ShiftLeft\",\n    \"Esc\": \"Escape\",\n    \"Enter\": \"Enter\",\n    \"Up\": \"ArrowUp\",\n    \"Down\": \"ArrowDown\"\n});\n\n/**\n * @param {string} unsafe\n * @returns {string}\n */\nexport const safeText = (unsafe) => {\n    if (!unsafe)\n        return ''\n    return unsafe\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#039;\");\n}\n\n/**\n * To be used when generating HTML via string interpolation e.g. {@code safeHtml`<div>${variables}</div>`} -\n * these variables will go through this function and have to be escaped should such string be shown on UI.\n *\n * @param {TemplateStringsArray} strings\n * @param {string[]} values\n * @returns {string}\n */\nexport const safeHtml = (strings, ...values) => {\n    let result = strings[0];\n    for (let i = 0; i < values.length; i++) {\n        result += safeText(String(values[i]));\n        result += strings[i + 1];\n    }\n    return result;\n}\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nexport function getTextWidth(text, font) {\n    // re-use canvas object for better performance\n    const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement(\"canvas\"));\n    const context = canvas.getContext(\"2d\");\n    context.font = font;\n    const metrics = context.measureText(text);\n    return metrics.width;\n}\n\nexport function getCanvasFont(el = document.body) {\n    const fontWeight = getCssStyle(el, 'font-weight') || 'normal';\n    const fontSize = getCssStyle(el, 'font-size') || '16px';\n    const fontFamily = getCssStyle(el, 'font-family') || 'Times New Roman';\n\n    return `${fontWeight} ${fontSize} ${fontFamily}`;\n}\n\nfunction getCssStyle(element, prop) {\n    return window.getComputedStyle(element, null).getPropertyValue(prop);\n}\n\nexport function isFiniteNumber (value) {\n    if (typeof value !== 'undefined' && Number.isFinite(value)) {\n        return true\n    }\n   else return false\n}","// @ts-check\nimport TextInputValidityState from \"./TextInputValidityState.js\";\nimport {isFiniteNumber, KeyCode, safeHtml} from \"../utils.js\"\n\nexport default class TextInput extends HTMLElement {\n    static #INPUT_ATTRIBUTES = new Set([\"autocomplete\", \"autofocus\", \"disabled\", \"max\", \"maxlength\",\n        \"min\", \"minlength\", \"name\", \"pattern\", \"readonly\", \"step\", \"type\", \"value\"\n        /* \"required\" - we do not want to set attribute required when render text-input, because in this case all\n        required inputs becomes red, as solution we just leave it in the root element and do this validation manually */]);\n    /** @type {HTMLInputElement} */\n    #inputElement;\n    /** @type {HTMLElement} */\n    #errorElement;\n    /** @type {TextInputValidityState} */\n    #validityState;\n    #callbacks = {\n        /** @type {Function[]} */\n        onTrailingIconClick: [],\n        /** @type {Function[]} */\n        onChangeValue: [],\n        /** @type {Function[]} */\n        onInput: []\n    };\n\n    connectedCallback() {\n        this.innerHTML = this.#htmlTemplate();\n        this.#inputElement = this.querySelector(\"input\");\n        this.#errorElement = this.querySelector(\".text-input__error\");\n        this.#validityState = new TextInputValidityState(this);\n        this.#fillInputAttributes();\n        this.#addListeners();\n        if (this.hasAttribute(\"value\"))\n            this.value = this.getAttribute(\"value\");\n    }\n\n    disconnectedCallback() {\n        // Save value to attribute, because it will be lost after element is removed from DOM and reinserted.\n        // The case is happening when user adds new element to the table and then sorts it by reinserting rows.\n        this.setAttribute(\"value\", this.value);\n        window.removeEventListener(\"visibilitychange\", this.#onVisibilityChange.bind(this), { capture: true });\n    }\n\n    /**\n     * Returns trimmed value of the input.\n     * @returns {string}\n     */\n    get value() {\n        return this.rawValue.trim();\n    }\n\n    /**\n     * Returns raw value of the input.\n     * @returns {string}\n     */\n    get rawValue() {\n        return this.#inputElement.value;\n    }\n\n    /** @param {string | null} value */\n    set value(value) {\n        this.#inputElement.value = (isFiniteNumber(value) || typeof value == \"string\")? value : '';\n        this.checkValidity();\n    }\n\n    checkValidity() {\n        const isValid = this.#validityState.checkValidity();\n        this.errorMessage = this.#validityState.errorMessage;\n        return isValid;\n    }\n\n    get errorMessage() {\n        return this.#errorElement.textContent;\n    }\n\n    set errorMessage(message) {\n        this.#validityState.setCustomValidity(message);\n        this.#errorElement.textContent = this.#validityState.errorMessage;\n    }\n\n    /** @param {Function} callback */\n    onTrailingIconClick(callback) {\n        this.#callbacks.onTrailingIconClick.push(callback);\n    }\n    /** @param {Function} callback */\n    onInput(callback) {\n        this.#callbacks.onInput.push(callback);\n    }\n    /** @param {Function} callback */\n    onChangeValue(callback) {\n        this.#callbacks.onChangeValue.push(callback);\n    }\n\n    // @ts-ignore\n    focus(options) {\n        this.#inputElement.focus(options)\n    }\n\n    /** @param {boolean} isDisabled */\n    setDisabled(isDisabled) {\n        this.toggleAttribute(\"disabled\", isDisabled);\n        this.#inputElement.toggleAttribute(\"disabled\", isDisabled);\n    }\n\n    /** @param {KeyboardEvent} event */\n    #onKeyDown(event) {\n        if (this.#inputElement.type === \"number\" && (event.key === KeyCode.Up || event.key === KeyCode.Down))\n            event.preventDefault();\n    }\n\n    #onInput() {\n        this.checkValidity();\n        this.#callbacks.onInput.forEach(callback => callback(this.value));\n    }\n\n    #onChange() {\n        this.#validateAndNotify();\n    }\n\n    #onTrailingIconClick() {\n        this.#callbacks.onTrailingIconClick.forEach(callback => callback());\n    }\n\n    #validateAndNotify() {\n        this.checkValidity();\n        this.#callbacks.onChangeValue.forEach(callback => callback(this.value));\n    }\n\n    #fillInputAttributes() {\n        for (const attribute of this.attributes)\n            if (TextInput.#INPUT_ATTRIBUTES.has(attribute.name))\n                this.#inputElement.setAttribute(attribute.name, attribute.value)\n        // For number inputs, if step is not specified then it is set to 1 by default, and it is not possible to enter\n        // decimal w/o validation error. So, if step is not specified, then we set it to \"any\" to allow decimal values.\n        if (this.getAttribute(\"type\") === \"number\" && !this.hasAttribute(\"step\"))\n            this.#inputElement.setAttribute(\"step\", \"any\");\n    }\n\n    #addListeners() {\n        this.#inputElement.addEventListener(\"keydown\", this.#onKeyDown.bind(this));\n        this.#inputElement.addEventListener(\"input\", this.#onInput.bind(this));\n        this.#inputElement.addEventListener(\"change\", this.#onChange.bind(this));\n        this.querySelector('.text-input__trailing-icon').addEventListener(\"click\", this.#onTrailingIconClick.bind(this));\n        window.addEventListener(\"visibilitychange\", this.#onVisibilityChange.bind(this), { capture: true });\n    }\n\n    /**\n     * This method is called when user:\n     *  - closes the tab\n     *  - closes browser window\n     *  - refreshes the page\n     *  - navigates to another page\n     *  - navigates to another tab\n     *  - minimizes the browser window\n     *\n     *  It is needed to blur the input element, because if it is focused, then it might be not saved to the database.\n     *  Blurring the input element will trigger the change event, if the value was changed.\n     *\n     *  Note: If the user closes the tab or browser window, then there is no guarantee that asynchronous requests\n     *  (XHR or fetch) will be sent. So, if the user closes the tab or browser window, then the value\n     *  of the input element might not be saved to the database.\n     */\n    #onVisibilityChange() {\n        if (document.activeElement === this.#inputElement)\n            this.#inputElement.blur();\n    }\n\n    #htmlTemplate() {\n        const trailingIconName = this.getAttribute(\"data-icon\") || \"\";\n        return safeHtml`<input class=\"text-input__input\" placeholder=\"needed for CSS\">\n                <label class=\"text-input__label\">${this.getAttribute(\"label\")}</label>\n                <i class=\"text-input__trailing-icon material-symbols-outlined\">${trailingIconName}</i>\n                <p class=\"text-input__error\"></p>`;\n    }\n\n    static get is() {\n        return 'text-input';\n    }\n}\n\nwindow.customElements.define(TextInput.is, TextInput);","import {getTextWidth, getCanvasFont, safeHtml} from \"../utils.js\";\n\nexport default class ListBox extends HTMLElement {\n    #listElement;\n    #values = [];\n    #maxItemWidth = 0;\n    #selectedElementIndex = -1;\n    #callbacks = {\n        onOptionClick: []\n    }\n\n    /**\n     * @returns {{displayName:string}[]}\n     */\n    get options() {\n        return this.#values;\n    }\n\n    /**\n     * @param {{displayName:string}[]}values\n     */\n    set options(values) {\n        this.#setValues(values);\n        this.innerHTML = this.#htmlTemplate();\n        this.#listElement = this.querySelector(\"ul\");\n        this.#updatePosition();\n        this.#addListeners();\n    }\n\n    /**\n     * @param {string} filter\n     */\n    set filter(filter) {\n        const searchString = filter.toLowerCase();\n        for (const li of this.querySelectorAll(\"li\")) {\n            const {displayName} = this.#values[li.dataset.index];\n            const indexOf = displayName.toLowerCase().indexOf(searchString);\n            li.innerHTML = this.#getMarkedText(displayName, indexOf, searchString.length);\n            li.toggleAttribute('hidden', indexOf === -1);\n        }\n        const selectedElement = this.#getSelectedElement();\n        if (selectedElement) {\n            if (selectedElement.hasAttribute('hidden'))\n                this.#resetCurrentSelection();\n            else\n                selectedElement.scrollIntoView({block: \"nearest\"});\n        }\n    }\n\n    show() {\n        this.style.display = 'block';\n        this.#updatePosition();\n    }\n\n    hide() {\n        this.style.display = 'none';\n        this.#resetCurrentSelection();\n    }\n\n    selectNextItem() {\n        const visibleElements = this.#getVisibleElements();\n        if (!this.hasSelectedElement()) {\n            if (visibleElements.length === 0)\n                return;\n            this.#setSelectedElement(visibleElements[0].dataset.index);\n        } else {\n            const indexOf = visibleElements.indexOf(this.#getSelectedElement());\n            if (visibleElements.length - 1 <= indexOf) // is last item?\n                return;\n            this.#setSelectedElement(visibleElements[indexOf + 1].dataset.index);\n        }\n    }\n\n    selectPrevItem() {\n        const visibleElements = this.#getVisibleElements();\n        if (!this.hasSelectedElement()) {\n            if (visibleElements.length === 0)\n                return;\n            this.#setSelectedElement(visibleElements[visibleElements.length - 1].dataset.index);\n        } else {\n            const indexOf = visibleElements.indexOf(this.#getSelectedElement());\n            if (indexOf === 0) // is first item?\n                return;\n            this.#setSelectedElement(visibleElements[indexOf - 1].dataset.index);\n        }\n    }\n\n    triggerClickOnSelectedItem() {\n        if (this.hasSelectedElement())\n            this.#getSelectedElement().dispatchEvent(new MouseEvent('mousedown'));\n    }\n\n    hasSelectedElement() {\n        return this.#getSelectedElement() != null;\n    }\n\n    isVisible() {\n        return window.getComputedStyle(this).display !== 'none'\n    }\n\n    onOptionClick(cb) {\n        this.#callbacks.onOptionClick.push(cb);\n    }\n\n    connectedCallback() {\n        this.innerHTML = this.#htmlTemplate();\n        this.#listElement = this.querySelector(\"ul\");\n        this.#addListeners();\n    }\n\n    #setValues(values) {\n        this.#values = [...values].sort((a, b) => a.displayName.localeCompare(b.displayName));\n    }\n\n    #getVisibleElements() {\n        return [...this.#listElement.querySelectorAll('li:not([hidden])')];\n    }\n\n    #addListeners() {\n        for (const li of this.querySelectorAll(\"li\")) {\n            li.addEventListener('mousedown', () => {\n                const option = this.#values[li.dataset.index];\n                this.#callbacks.onOptionClick.forEach(cb => cb(option));\n            });\n        }\n    }\n\n    #htmlTemplate() {\n        return `\n            <ul>\n                ${this.#values.map((value, i) =>\n            safeHtml`<li data-index=\"${i}\" title=\"${value.displayName}\">${value.displayName}</li>`\n        ).join('')}\n            </ul>`;\n    }\n\n    #updatePosition() {\n        const font = getCanvasFont();\n        const parentClientRect = this.parentElement.getBoundingClientRect();\n        if (this.#maxItemWidth === 0) // calculate max item width only once\n            this.#maxItemWidth = Math.max(...this.#values.map(value => getTextWidth(value.displayName, font)), 0);\n        // if parent element width is greater than max item width, set list width to parent width\n        const widthToBe = Math.max(this.#maxItemWidth + 24/*paddings*/ + 22/*scrollbar*/, parentClientRect.width);\n        // max allowed width is the distance from the left side of parent element to the right side of the page\n        const maxAllowedWidth = document.documentElement.clientWidth - parentClientRect.left\n        if (widthToBe > maxAllowedWidth) { // can't fit to the right side, so put it to the left side\n            this.#listElement.style.right = 0;\n        } else {\n            this.#listElement.style.right = null;\n        }\n        this.#listElement.style.width = `${Math.min(widthToBe, document.documentElement.clientWidth)}px`;\n    }\n\n    #getSelectedElement() {\n        return this.querySelector(`li[data-index=\"${this.#selectedElementIndex}\"]`);\n    }\n\n    #setSelectedElement(elementIndex) {\n        this.#resetCurrentSelection();\n        this.#selectedElementIndex = elementIndex;\n        const element = this.#getSelectedElement();\n        element.classList.add('list-box__item--active');\n        element.scrollIntoView({block: \"nearest\"});\n    }\n\n    #resetCurrentSelection() {\n        if (this.#selectedElementIndex >= 0) {\n            const selectedElement = this.#getSelectedElement();\n            selectedElement.classList.remove('list-box__item--active');\n            this.#selectedElementIndex = -1;\n        }\n    }\n\n    #getMarkedText(text, startIndex, length) {\n        if (startIndex >= 0) {\n            const before = text.substring(0, startIndex);\n            const match = text.substring(startIndex, startIndex + length);\n            const after = text.substring(startIndex + length);\n            // wrap whole text in span to prevent swallowing spaces\n            return safeHtml`<span>${before}<mark>${match}</mark>${after}</span>`;\n        } else {\n            return text;\n        }\n    }\n\n    static get is() {\n        return 'list-box';\n    }\n}\n\nwindow.customElements.define(ListBox.is, ListBox);","import '../TextInput/TextInput.js';\nimport '../ListBox/ListBox.js';\nimport { KeyCode, safeHtml } from \"../utils.js\"\n\nexport default class TypeAheadInput extends HTMLElement {\n    /**\n     * @type {TextInput}\n     */\n    #inputElement;\n    /**\n     * @type {ListBox}\n     */\n    #dropdownElement;\n    #currentValue;\n    #lastValidValue = null;\n    #shouldMatchOptions;\n    #callbacks = {\n        onChangeValue: []\n    }\n\n    connectedCallback() {\n        this.innerHTML = this.#htmlTemplate();\n        this.#inputElement = this.querySelector(\"text-input\");\n        this.#dropdownElement = this.querySelector(\"list-box\");\n        this.#shouldMatchOptions = this.hasAttribute(\"shouldMatchOptions\")\n        this.#addListeners();\n    }\n\n    get value() {\n        return this.#currentValue;\n    }\n\n    get rawValue() {\n        return this.#inputElement.value;\n    }\n\n    set value(value) {\n        this.#currentValue = value;\n        this.#inputElement.value = value && value.displayName ? value.displayName : \"\";\n    }\n\n    /**\n     * Sets the initial value of the input, as well as the last valid value.\n     */\n    set initialValue(value) {\n        this.value = value;\n        this.#lastValidValue = value;\n    }\n\n    set options(options) {\n        this.#dropdownElement.options = options;\n        this.#filterDatalist();\n    }\n\n    set errorMessage(message) {\n        this.#inputElement.errorMessage = message;\n    }\n\n    checkValidity() {\n        return this.#validate() && this.#inputElement.checkValidity();\n    }\n\n    onChangeValue(callback) {\n        this.#callbacks.onChangeValue.push(callback);\n    }\n\n    /** @param {boolean} isDisabled */\n    setDisabled(isDisabled) {\n        this.toggleAttribute(\"disabled\", isDisabled);\n        this.#inputElement.setDisabled(isDisabled);\n    }\n\n\n    #onInput() {\n        this.errorMessage = \"\";\n        this.#filterDatalist();\n        if (!this.#dropdownElement.isVisible())\n            this.#dropdownElement.show();\n    }\n\n    #onFocus() {\n        this.#filterDatalist();\n        this.#dropdownElement.show();\n    }\n\n    #onBlur() {\n        this.#hideDropdownAndValidate();\n    }\n\n    #onOptionClick(option) {\n        this.value = option;\n        this.#hideDropdownAndValidate();\n    }\n\n    #onClearIconClick() {\n        this.value = {displayName: \"\"};\n        this.#inputElement.querySelector('input').focus();\n    }\n\n    #onKeydown(event) {\n        if ([KeyCode.Up, KeyCode.Down].includes(event.code)) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n        switch (event.key) {\n            case KeyCode.Esc: {\n                this.#hideDropdownAndValidate();\n                break;\n            }\n            case KeyCode.Enter: {\n                if (this.#dropdownElement.isVisible())\n                    if (this.#dropdownElement.hasSelectedElement())\n                        this.#dropdownElement.triggerClickOnSelectedItem();\n                    else\n                        this.#hideDropdownAndValidate();\n                break;\n            }\n            case KeyCode.Down: {\n                if (!this.#dropdownElement.isVisible())\n                    this.#dropdownElement.show();\n                this.#dropdownElement.selectNextItem();\n                break;\n            }\n            case KeyCode.Up: {\n                if (!this.#dropdownElement.isVisible())\n                    this.#dropdownElement.show();\n                this.#dropdownElement.selectPrevItem();\n                break;\n            }\n        }\n    }\n\n    #onInputValueChange() {\n        this.#validateAndNotify();\n    }\n\n    #hideDropdownAndValidate() {\n        this.#dropdownElement.hide();\n        this.#validateAndNotify();\n    }\n\n    #validateAndNotify() {\n        if (this.#validate() && this.#isValueChanged()) {\n            this.#lastValidValue = this.value;\n            this.#callbacks.onChangeValue.forEach(callback => callback(this.value));\n        }\n    }\n\n    #validate() {\n        const inputText = this.#inputElement.value;\n        if (inputText === \"\") {\n            this.#currentValue = null;\n            return true; // assume that value is valid if it is empty, otherwise required attribute should be set\n        }\n        if (this.value && this.value.displayName === inputText) {\n            this.errorMessage = \"\";\n            return true; // assume that value is valid if it is the same as the initial value\n        }\n        if (!this.#shouldMatchOptions) {\n            this.errorMessage = \"\";\n            this.#currentValue = {displayName: inputText};\n            return true; // assume that value is valid if it should not match to any option\n        }\n        for (const option of this.#dropdownElement.options) {\n            if (option.displayName === inputText) {\n                this.errorMessage = \"\";\n                this.#currentValue = option;\n                this.#inputElement.value = option.displayName;\n                return true;\n            }\n        }\n        this.#currentValue = null;\n        this.errorMessage = \"Select from list\";\n        return false;\n    }\n\n    #filterDatalist() {\n        this.#dropdownElement.filter = this.#inputElement.value;\n    }\n\n    #isValueChanged() {\n        return this.#lastValidValue !== this.value;\n    }\n\n    #addListeners() {\n        const input = this.#inputElement.querySelector(\"input\");\n        this.addEventListener(\"keydown\", this.#onKeydown.bind(this));\n        input.addEventListener(\"input\", this.#onInput.bind(this));\n        input.addEventListener(\"blur\", this.#onBlur.bind(this));\n        input.addEventListener('focus', this.#onFocus.bind(this));\n        this.#inputElement.onTrailingIconClick(this.#onClearIconClick.bind(this));\n        this.#inputElement.onChangeValue(this.#onInputValueChange.bind(this));\n        this.#dropdownElement.onOptionClick(this.#onOptionClick.bind(this));\n    }\n\n    #htmlTemplate() {\n        const requiredAttribute = this.hasAttribute(\"required\") ? \"required\" : \"\";\n        const disabledAttribute = this.hasAttribute(\"disabled\") ? \"disabled\" : \"\";\n        const iconName = this.hasAttribute(\"no-icon\") ? \"\" : \"close\";\n        return safeHtml`\n            <text-input \n                class=\"text-input--with-right-icon\" \n                label=\"${this.getAttribute(\"label\")}\" \n                ${requiredAttribute}\n                ${disabledAttribute}\n                data-icon=\"${iconName}\"\n                autocomplete=\"off\"\n            ></text-input>\n            <list-box></list-box>`;\n    }\n\n    static get is() {\n        return 'typeahead-input';\n    }\n}\n\nwindow.customElements.define(TypeAheadInput.is, TypeAheadInput);","import {KeyCode, safeHtml} from \"../utils.js\";\n\nexport default class SelectInput extends HTMLElement {\n    #inputElement;\n    #dropdownElement;\n    #currentValue;\n    #lastValidValue = null;\n\n    #callbacks = {\n        onShowDropdown: [],\n        onChangeValue: []\n    }\n\n    get value() {\n        return this.#currentValue;\n    }\n\n    set value(value) {\n        this.#inputElement.value = value && value.displayName ? value.displayName : \"\";\n        this.#currentValue = value;\n    }\n\n    set options(options) {\n        this.#dropdownElement.options = options;\n    }\n\n    showDropdown() {\n        this.#dropdownElement.show();\n        this.#callbacks.onShowDropdown.forEach(callback => callback());\n    }\n\n    onShowDropdown(callback) {\n        this.#callbacks.onShowDropdown.push(callback);\n    }\n\n    onChangeValue(callback) {\n        this.#callbacks.onChangeValue.push(callback);\n    }\n\n    checkValidity() {\n        return this.#validate();\n    }\n\n    connectedCallback() {\n        this.innerHTML = this.#htmlTemplate();\n        this.#inputElement = this.querySelector(\"text-input\");\n        this.#dropdownElement = this.querySelector(\"list-box\");\n        this.#addListeners();\n    }\n\n    #addListeners() {\n        this.addEventListener(\"keydown\", this.#onKeydown.bind(this));\n        const input = this.#inputElement.querySelector(\"input\");\n        input.addEventListener('focus', this.#onFocus.bind(this));\n        input.addEventListener(\"focusout\", this.#onFocusout.bind(this));\n        input.addEventListener(\"click\", this.#onInputClick.bind(this));\n        this.#dropdownElement.onOptionClick(this.#onOptionClick.bind(this));\n    }\n\n    #onFocus() {\n        this.showDropdown();\n    }\n\n    #onFocusout() {\n        this.#hideDropdownAndValidate();\n    }\n\n    #onOptionClick(option) {\n        this.#inputElement.value = option.displayName;\n        this.#currentValue = option;\n        this.#hideDropdownAndValidate();\n    }\n\n    #onInputClick() {\n        this.showDropdown();\n    }\n\n    #onKeydown(event) {\n        if ([KeyCode.Up, KeyCode.Down].includes(event.code)) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n        switch (event.key) {\n            case KeyCode.Esc: {\n                event.preventDefault();\n                this.#hideDropdownAndValidate();\n                this.#inputElement.focus();\n                break;\n            }\n            case KeyCode.Enter: {\n                if (this.#dropdownElement.isVisible()) {\n                    event.stopPropagation();\n                    if (this.#dropdownElement.hasSelectedElement())\n                        this.#dropdownElement.triggerClickOnSelectedItem();\n                    else\n                        this.#dropdownElement.hide();\n                }\n                break;\n            }\n            case KeyCode.Down: {\n                if (!this.#dropdownElement.isVisible())\n                    this.#dropdownElement.show();\n                this.#dropdownElement.selectNextItem();\n                break;\n            }\n            case KeyCode.Up: {\n                if (!this.#dropdownElement.isVisible())\n                    this.#dropdownElement.show();\n                this.#dropdownElement.selectPrevItem();\n                break;\n            }\n        }\n    }\n\n    #hideDropdownAndValidate() {\n        this.#dropdownElement.hide();\n        this.#validateAndNotify();\n    }\n\n    #validateAndNotify() {\n        if (this.#validate() && this.#lastValidValue !== this.value) {\n            this.#lastValidValue = this.value;\n            this.#callbacks.onChangeValue.forEach(callback => callback(this.value))\n        }\n    }\n\n    #validate() {\n        if (this.#inputElement.hasAttribute(\"required\") && !this.#inputElement.value)\n            this.#inputElement.errorMessage = \"Required\";\n        else\n            this.#inputElement.errorMessage = \"\";\n        return this.#inputElement.checkValidity();\n    }\n\n    #htmlTemplate() {\n        const requiredAttribute = this.hasAttribute(\"required\") ? \"required\" : \"\";\n        const disabledAttribute = this.hasAttribute(\"disabled\") ? \"disabled\" : \"\";\n        return safeHtml`\n            <text-input\n                class=\"text-input--select\" \n                label=\"${this.getAttribute(\"label\")}\" \n                ${requiredAttribute}\n                ${disabledAttribute}\n                data-icon=\"arrow_drop_down\"\n                readonly\n            ></text-input>\n            <list-box></list-box>`;\n    }\n\n    static get is() {\n        return 'select-input';\n    }\n}\n\nwindow.customElements.define(SelectInput.is, SelectInput);"],"names":["TextInputValidityState","constructor","textInput","this","querySelector","isValid","errorMessage","checkValidity","setCustomValidity","validity","valid","message","badInput","customError","patternMismatch","typeMismatch","rangeOverflow","rangeUnderflow","tooLong","tooShort","valueMissing","stepMismatch","cv","Object","assign","trimmedText","value","trim","hasAttribute","type","min","max","validityState","isTypeNumber","step","maxLength","minLength","validationMessage","KeyCode","freeze","safeHtml","strings","values","result","i","length","unsafe","String","replace","getTextWidth","text","font","context","canvas","document","createElement","getContext","measureText","width","getCssStyle","element","prop","window","getComputedStyle","getPropertyValue","TextInput","HTMLElement","static","Set","onTrailingIconClick","onChangeValue","onInput","connectedCallback","innerHTML","getAttribute","disconnectedCallback","setAttribute","removeEventListener","bind","capture","rawValue","Number","isFinite","isFiniteNumber","textContent","callback","push","focus","options","setDisabled","isDisabled","toggleAttribute","event","key","Up","Down","preventDefault","forEach","attribute","attributes","has","name","addEventListener","activeElement","blur","trailingIconName","is","customElements","define","ListBox","onOptionClick","filter","searchString","toLowerCase","li","querySelectorAll","displayName","dataset","index","indexOf","selectedElement","scrollIntoView","block","show","style","display","hide","selectNextItem","visibleElements","hasSelectedElement","selectPrevItem","triggerClickOnSelectedItem","dispatchEvent","MouseEvent","isVisible","cb","sort","a","b","localeCompare","option","map","join","el","body","getCanvasFont","parentClientRect","parentElement","getBoundingClientRect","Math","widthToBe","maxAllowedWidth","documentElement","clientWidth","left","right","elementIndex","classList","add","remove","startIndex","before","substring","match","after","TypeAheadInput","initialValue","includes","code","stopImmediatePropagation","Esc","Enter","inputText","input","requiredAttribute","disabledAttribute","iconName","SelectInput","onShowDropdown","showDropdown","stopPropagation"],"sourceRoot":""}